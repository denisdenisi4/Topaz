# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Topaz
else:
    import _Topaz

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class DeviceInformation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    serialNumber = property(_Topaz.DeviceInformation_serialNumber_get, _Topaz.DeviceInformation_serialNumber_set)
    whiteTile = property(_Topaz.DeviceInformation_whiteTile_get, _Topaz.DeviceInformation_whiteTile_set)
    calibrationDate = property(_Topaz.DeviceInformation_calibrationDate_get, _Topaz.DeviceInformation_calibrationDate_set)
    instrumentType = property(_Topaz.DeviceInformation_instrumentType_get, _Topaz.DeviceInformation_instrumentType_set)
    angles = property(_Topaz.DeviceInformation_angles_get, _Topaz.DeviceInformation_angles_set)
    numberOfAngles = property(_Topaz.DeviceInformation_numberOfAngles_get, _Topaz.DeviceInformation_numberOfAngles_set)

    def __str__(self):
        return _Topaz.DeviceInformation___str__(self)

    def __init__(self):
        _Topaz.DeviceInformation_swiginit(self, _Topaz.new_DeviceInformation())
    __swig_destroy__ = _Topaz.delete_DeviceInformation

# Register DeviceInformation in _Topaz:
_Topaz.DeviceInformation_swigregister(DeviceInformation)

class Answer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NotConnected = _Topaz.Answer_NotConnected
    NoResponse = _Topaz.Answer_NoResponse
    WrongResponse = _Topaz.Answer_WrongResponse
    ResponseFormatError = _Topaz.Answer_ResponseFormatError
    UnknownError = _Topaz.Answer_UnknownError
    ContentError = _Topaz.Answer_ContentError
    UnknownDeviceTypeForLegacyCalculation = _Topaz.Answer_UnknownDeviceTypeForLegacyCalculation
    OK = _Topaz.Answer_OK
    UNKNOWN_CMD = _Topaz.Answer_UNKNOWN_CMD
    NOT_ALL_READ = _Topaz.Answer_NOT_ALL_READ
    TEMP_SENSOR = _Topaz.Answer_TEMP_SENSOR
    PARAM_OUT_OF_RANGE = _Topaz.Answer_PARAM_OUT_OF_RANGE
    NAND_FLASH = _Topaz.Answer_NAND_FLASH
    MAX_SIZE = _Topaz.Answer_MAX_SIZE
    FILE_OPEN = _Topaz.Answer_FILE_OPEN
    FILE_DELETE = _Topaz.Answer_FILE_DELETE
    FILE_WRITE = _Topaz.Answer_FILE_WRITE
    FILE_READ = _Topaz.Answer_FILE_READ
    FILE_CLOSE = _Topaz.Answer_FILE_CLOSE
    FILE_DIR = _Topaz.Answer_FILE_DIR
    DATA_NOT_AVAILABLE = _Topaz.Answer_DATA_NOT_AVAILABLE
    UNDEFINED = _Topaz.Answer_UNDEFINED
    NO_LIGHT_DETECTED = _Topaz.Answer_NO_LIGHT_DETECTED
    AMBIENT_LIGHT = _Topaz.Answer_AMBIENT_LIGHT
    CALIBRATION_EXPIRED = _Topaz.Answer_CALIBRATION_EXPIRED
    RECOVER_USB = _Topaz.Answer_RECOVER_USB
    CALIB_DATA = _Topaz.Answer_CALIB_DATA
    OLD_CALIB_DATA = _Topaz.Answer_OLD_CALIB_DATA
    FILE_SYSTEM = _Topaz.Answer_FILE_SYSTEM
    SYSTEM_BUSY = _Topaz.Answer_SYSTEM_BUSY
    SHUTTER_PROBABLY_NOT_CLOSED = _Topaz.Answer_SHUTTER_PROBABLY_NOT_CLOSED
    NOT_CALIBRATED = _Topaz.Answer_NOT_CALIBRATED
    UNKNOWN_CALIB_FORMAT = _Topaz.Answer_UNKNOWN_CALIB_FORMAT
    CRC32 = _Topaz.Answer_CRC32
    DATA_FLASH = _Topaz.Answer_DATA_FLASH
    ZERO_SIZE = _Topaz.Answer_ZERO_SIZE
    NO_ACCESS = _Topaz.Answer_NO_ACCESS
    BLUETOOTH_CONFIG = _Topaz.Answer_BLUETOOTH_CONFIG
    CHIP_ID_CRC = _Topaz.Answer_CHIP_ID_CRC
    NOT_IMPLEMENTED_YET = _Topaz.Answer_NOT_IMPLEMENTED_YET
    JOB_ALREADY_DEFINED = _Topaz.Answer_JOB_ALREADY_DEFINED
    JOB_NOT_CREATED = _Topaz.Answer_JOB_NOT_CREATED
    JOB_NOT_FOUND = _Topaz.Answer_JOB_NOT_FOUND
    JOB_NOT_DELETED = _Topaz.Answer_JOB_NOT_DELETED
    JOB_LIST_FULL = _Topaz.Answer_JOB_LIST_FULL
    SHUTTER = _Topaz.Answer_SHUTTER
    NOT_INITIALIZED = _Topaz.Answer_NOT_INITIALIZED
    WHITE_CAL = _Topaz.Answer_WHITE_CAL
    DeviceLocked = _Topaz.Answer_DeviceLocked
    WIFI_POWER_OFF = _Topaz.Answer_WIFI_POWER_OFF
    WIFI_INACTIVE = _Topaz.Answer_WIFI_INACTIVE
    NO_WIFI_CMD = _Topaz.Answer_NO_WIFI_CMD
    WIFI_BUSY = _Topaz.Answer_WIFI_BUSY

    @staticmethod
    def toString(code):
        return _Topaz.Answer_toString(code)

    @staticmethod
    def isOk(code):
        return _Topaz.Answer_isOk(code)

    @staticmethod
    def isFail(code):
        return _Topaz.Answer_isFail(code)

    def __init__(self):
        _Topaz.Answer_swiginit(self, _Topaz.new_Answer())
    __swig_destroy__ = _Topaz.delete_Answer

# Register Answer in _Topaz:
_Topaz.Answer_swigregister(Answer)

def Answer_toString(code):
    return _Topaz.Answer_toString(code)

def Answer_isOk(code):
    return _Topaz.Answer_isOk(code)

def Answer_isFail(code):
    return _Topaz.Answer_isFail(code)

class AngleDescription(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_Topaz.AngleDescription_name_get, _Topaz.AngleDescription_name_set)
    position = property(_Topaz.AngleDescription_position_get, _Topaz.AngleDescription_position_set)

    def __init__(self):
        _Topaz.AngleDescription_swiginit(self, _Topaz.new_AngleDescription())
    __swig_destroy__ = _Topaz.delete_AngleDescription

# Register AngleDescription in _Topaz:
_Topaz.AngleDescription_swigregister(AngleDescription)
cvar = _Topaz.cvar
MaxStringLength = cvar.MaxStringLength
MaxNumberOfAngles = cvar.MaxNumberOfAngles

class Time(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    year = property(_Topaz.Time_year_get, _Topaz.Time_year_set)
    month = property(_Topaz.Time_month_get, _Topaz.Time_month_set)
    day = property(_Topaz.Time_day_get, _Topaz.Time_day_set)
    hour = property(_Topaz.Time_hour_get, _Topaz.Time_hour_set)
    minute = property(_Topaz.Time_minute_get, _Topaz.Time_minute_set)
    second = property(_Topaz.Time_second_get, _Topaz.Time_second_set)

    def __init__(self, year, month, day, hour, minute, second):
        _Topaz.Time_swiginit(self, _Topaz.new_Time(year, month, day, hour, minute, second))
    __swig_destroy__ = _Topaz.delete_Time

    def __str__(self):
        return _Topaz.Time___str__(self)

# Register Time in _Topaz:
_Topaz.Time_swigregister(Time)

class Job(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    MaxIdentifierLength = _Topaz.Job_MaxIdentifierLength
    MaxNameLength = _Topaz.Job_MaxNameLength
    identifier = property(_Topaz.Job_identifier_get, _Topaz.Job_identifier_set)
    name = property(_Topaz.Job_name_get, _Topaz.Job_name_set)
    status = property(_Topaz.Job_status_get, _Topaz.Job_status_set)

    def __str__(self):
        return _Topaz.Job___str__(self)

    def __init__(self):
        _Topaz.Job_swiginit(self, _Topaz.new_Job())
    __swig_destroy__ = _Topaz.delete_Job

# Register Job in _Topaz:
_Topaz.Job_swigregister(Job)

class Sample(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NumberOfSpectralValues = _Topaz.Sample_NumberOfSpectralValues
    timeStamp = property(_Topaz.Sample_timeStamp_get, _Topaz.Sample_timeStamp_set)
    temperature = property(_Topaz.Sample_temperature_get, _Topaz.Sample_temperature_set)
    spectralValues = property(_Topaz.Sample_spectralValues_get, _Topaz.Sample_spectralValues_set)
    LabCh = property(_Topaz.Sample_LabCh_get, _Topaz.Sample_LabCh_set)

    def __str__(self):
        return _Topaz.Sample___str__(self)

    def __init__(self):
        _Topaz.Sample_swiginit(self, _Topaz.new_Sample())
    __swig_destroy__ = _Topaz.delete_Sample

# Register Sample in _Topaz:
_Topaz.Sample_swigregister(Sample)

class ProfileData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    spectralValuesUncorrected = property(_Topaz.ProfileData_spectralValuesUncorrected_get, _Topaz.ProfileData_spectralValuesUncorrected_set)
    differences = property(_Topaz.ProfileData_differences_get, _Topaz.ProfileData_differences_set)
    blendingFactors = property(_Topaz.ProfileData_blendingFactors_get, _Topaz.ProfileData_blendingFactors_set)

    def __init__(self):
        _Topaz.ProfileData_swiginit(self, _Topaz.new_ProfileData())
    __swig_destroy__ = _Topaz.delete_ProfileData

# Register ProfileData in _Topaz:
_Topaz.ProfileData_swigregister(ProfileData)

class NetworkDescription(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    SSID = property(_Topaz.NetworkDescription_SSID_get, _Topaz.NetworkDescription_SSID_set)
    MACAddress = property(_Topaz.NetworkDescription_MACAddress_get, _Topaz.NetworkDescription_MACAddress_set)
    authentification = property(_Topaz.NetworkDescription_authentification_get, _Topaz.NetworkDescription_authentification_set)
    signalLevel = property(_Topaz.NetworkDescription_signalLevel_get, _Topaz.NetworkDescription_signalLevel_set)
    channel = property(_Topaz.NetworkDescription_channel_get, _Topaz.NetworkDescription_channel_set)
    mode = property(_Topaz.NetworkDescription_mode_get, _Topaz.NetworkDescription_mode_set)
    rate = property(_Topaz.NetworkDescription_rate_get, _Topaz.NetworkDescription_rate_set)

    def __str__(self):
        return _Topaz.NetworkDescription___str__(self)

    def __init__(self):
        _Topaz.NetworkDescription_swiginit(self, _Topaz.new_NetworkDescription())
    __swig_destroy__ = _Topaz.delete_NetworkDescription

# Register NetworkDescription in _Topaz:
_Topaz.NetworkDescription_swigregister(NetworkDescription)

class TopazInterface(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def connect(self, ipAddress=None):
        return _Topaz.TopazInterface_connect(self, ipAddress)

    def disconnect(self):
        return _Topaz.TopazInterface_disconnect(self)

    def setTime(self, time):
        return _Topaz.TopazInterface_setTime(self, time)

    def powerWiFiOn(self):
        return _Topaz.TopazInterface_powerWiFiOn(self)

    def powerWiFiOff(self):
        return _Topaz.TopazInterface_powerWiFiOff(self)

    def downloadFirmware(self, buffer, bufferSize):
        return _Topaz.TopazInterface_downloadFirmware(self, buffer, bufferSize)

    def isInMeasureMode(self, *args):
        return _Topaz.TopazInterface_isInMeasureMode(self, *args)

    def getSelftestReport(self, *args):
        return _Topaz.TopazInterface_getSelftestReport(self, *args)

    def getDeviceLog(self, *args):
        return _Topaz.TopazInterface_getDeviceLog(self, *args)

    def startMeasureMode(self, *args):
        return _Topaz.TopazInterface_startMeasureMode(self, *args)

    def getFirmwareInformation(self, *args):
        return _Topaz.TopazInterface_getFirmwareInformation(self, *args)

    def getMacAddress(self, *args):
        return _Topaz.TopazInterface_getMacAddress(self, *args)

    def getDeviceInformation(self, *args):
        return _Topaz.TopazInterface_getDeviceInformation(self, *args)

    def openShutter(self, *args):
        return _Topaz.TopazInterface_openShutter(self, *args)

    def closeShutter(self):
        return _Topaz.TopazInterface_closeShutter(self)

    def getJobResult(self, *args):
        return _Topaz.TopazInterface_getJobResult(self, *args)

    def deleteJob(self, *args):
        return _Topaz.TopazInterface_deleteJob(self, *args)

    def addJob(self, *args):
        return _Topaz.TopazInterface_addJob(self, *args)

    def getJobList(self, *args):
        return _Topaz.TopazInterface_getJobList(self, *args)

    def getTotalNumberOfJobs(self, *args):
        return _Topaz.TopazInterface_getTotalNumberOfJobs(self, *args)

    def getHostname(self, *args):
        return _Topaz.TopazInterface_getHostname(self, *args)

    def setHostname(self, *args):
        return _Topaz.TopazInterface_setHostname(self, *args)

    def getWifiConfiguration(self, *args):
        return _Topaz.TopazInterface_getWifiConfiguration(self, *args)

    def setWifiConfiguration(self, *args):
        return _Topaz.TopazInterface_setWifiConfiguration(self, *args)

    def getNetworkDescriptions(self, *args):
        return _Topaz.TopazInterface_getNetworkDescriptions(self, *args)

    def getTime(self, *args):
        return _Topaz.TopazInterface_getTime(self, *args)

    def getVersion(self, *args):
        return _Topaz.TopazInterface_getVersion(self, *args)

    def wifiConnect(self, address):
        return _Topaz.TopazInterface_wifiConnect(self, address)

    def usbConnect(self):
        return _Topaz.TopazInterface_usbConnect(self)

    def unlock(self, *args):
        return _Topaz.TopazInterface_unlock(self, *args)
    __swig_destroy__ = _Topaz.delete_TopazInterface

# Register TopazInterface in _Topaz:
_Topaz.TopazInterface_swigregister(TopazInterface)


def getTopazInterface():
    return _Topaz.getTopazInterface()

def getTopazSimulation():
    return _Topaz.getTopazSimulation()


